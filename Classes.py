=============================================================================class Time:    def __init__(self, hour,minute):        self.hour = hour        self.minute = minute    def print_time(self):        print (f"Current time is -> {self.hour:02d}:{self.minute:02d}" )    def time_in_minutes(self):        print (self.hour*60 + self.minute)current_time = Time(11,20)current_time.print_time()current_time.time_in_minutes()==========================================================================================================================================================class Date_Time:    def __init__(self, year=0, month=0, date=0):        self.year = year        self.month = month        self.date = datedef who_is_older(age1, age2):    if (age1.year, age1.month, age1.date) > (age2.year, age2.month, age2.date):        print("Person2 is older")    elif (age1.year, age1.month, age1.date) < (age2.year, age2.month, age2.date):        print("Person1 is older")    else:        print("Both have the same age.")Person1 = Date_Time(2002,7,25)Person2 = Date_Time(2002,7,15)who_is_older(Person1, Person2)==========================================================================================================================================================class Bank_Account:    def __init__(self, account_holder=None, balance=0):        self.account_holder = account_holder        self.balance = balance    def deposit(self, amount):        self.balance += amount    def widthdraw(self,amount):        if (amount > self.balance):            print ("Insufficiant balance ")        else :            self.balance -= amount    def show_balance(self):        return (self.balance)    def show_account_holder(self):        return (self.account_holder)def higher_balance(acc1, acc2):    if acc1.balance > acc2.balance:        print(f"{acc1.show_account_holder()} has a higher balance than {acc2.show_account_holder()}")    elif acc1.balance < acc2.balance:        print(f"{acc2.show_account_holder()} has a higher balance than {acc1.show_account_holder()}")    else:        print(f"{acc1.show_account_holder()} and {acc2.show_account_holder()} have the same balance")person1 = Bank_Account("Person_1_name", 10000)person2 = Bank_Account("Person_2_name", 5000)higher_balance(person1,person2)==========================================================================================================================================================class Library :    def __init__(self):        self.lib_contents = {}    def add_book(self, book):        if (book.ISBN in self.lib_contents):            self.lib_contents[book.ISBN][2] += 1        else:            self.lib_contents[book.ISBN] = [book.book_name, book.author, 1]    def borrow_book(self, ISBN):        if (ISBN not in self.lib_contents or self.lib_contents[ISBN][2] == 0):            return "NO BOOK FOUND"        else:            self.lib_contents[ISBN][2] -= 1    def return_book(self, ISBN):        if ISBN not in self.lib_contents:            return "Book Not Found"        else:            self.lib_contents[ISBN][2] += 1    def show_all_books(self):          for isbn, details in self.lib_contents.items():              print(f"ISBN -> {isbn}, Book Name -> {details[0]}, Book Author -> {details[1]}, Quantity -> {details[2]}")class Book():    def __init__(self,book_name=None, author= None, ISBN = None):        self.book_name = book_name        self.author = author        self.ISBN = ISBNlibrary = Library()library.add_book(Book('Book_name_1', 'author_name_1', "001"))library.add_book(Book('Book_name_2', 'author_name_2', "002"))library.borrow_book("001")library.return_book("001")library.show_all_books()==========================================================================================================================================================class Person():        def __init__(self, Person_name=None, Person_age=None, Person_gender=None):        self.Person_name = Person_name        self.Person_age = Person_age        self.Person_gender = Person_gender                class Student(Person):            def __init__(self, Student_id, Person_name=None, Person_age=None, Person_gender=None, Courses=None):        super().__init__(Person_name, Person_age, Person_gender)        self.Student_id = Student_id        self.Courses = Courses if Courses is not None else []                            def enroll(self, course):                if course not in self.Courses:            self.Courses.append(course)        else:            print ("Course already enrolled ")          def drop_course(self, course):               if course in self.Courses:            self.Courses.remove(course)        else:            print ("No such course present ")                        def list_courses(self):           for i in self.Courses:            print (i)                                        class Teacher(Person):    def __init__(self, Teacher_ID, Person_name=None, Person_age=None, Person_gender=None, Courses_taught=None):        super().__init__(Person_name, Person_age, Person_gender)        self.Teacher_ID = Teacher_ID        self.Courses_taught = Courses_taught if Courses_taught is not None else []                    def assign_course(self, course):                if course not in self.Courses_taught:            self.Courses_taught.append(course)        else:            print ("Course already being taught ")          def remove_course(self, course):               if course in self.Courses_taught:            self.Courses_taught.remove(course)        else:            print ("No such course present ")                def list_courses(self):           for i in self.Courses_taught:            print (i)            class School():        def __init__(self):        self.students = {}        self.teachers = {}                def add_student(self, student):        if student.Student_id not in self.students:            self.students[student.Student_id] = student                def remove_student(self, student):        if student.Student_id in self.students:            del self.students.Student_id                def add_teacher(self, teacher):        if teacher.teacher_id not in self.teachers:            self.teachers[teacher.teacher_id] = teacher        def remove_teacher(self, teacher_id):        if teacher_id in self.teachers:            del self.teachers[teacher_id]                def find_student(self, Student_ID):        if Student_ID not in self.students:            print ("No Student Found ")        else :            print("Student Found")            # add_student(student), remove_student(student_id), add_teacher(teacher), remove_teacher(teacher_id), find_student(student_id), find_teacher(teacher_id).school = School()student1 = Student("2020A3PS0493H", "Prakhar", 22, "Male" )student1.enroll("Deep Learning and Neural networks")student1.enroll("Object Oriented Programing")school.add_student(student1)school.find_student("2020A3PS0494H")student1.list_courses()==========================================================================================================================================================class Car():          def __init__(self, Car_name, Model_number):        self.Car_name = Car_name        self.Model_number = Model_number        class Costomer():        def __init__(self, Name, Costomer_ID):        self.Name = Name        self.Costomer_ID = Costomer_ID        class Car_rental():        def __init__(self):        self.cars = {}        self.costomers = {}            def add_cars(self, car):        if car.Model_number not in self.cars:            self.cars[car.Model_number] = car.Car_name            def remove_car(self, car):        if car.Model_number in self.cars:            del self.cars[car.Model_number]                def regester_costomer(self, costomer):        if costomer.Costomer_ID not in self.costomers:            self.costomers[costomer.Costomer_ID] = costomer.Name                def remove_costomer(self, costomer):        if costomer.Costomer_ID in self.costomers:            del self.costomers[costomer.Costomer_ID]    def rent_car(self, car):        if car.Model_number not in self.cars:            print ("No Car Found")        else:            del self.cars[car.Model_number]            def return_car(self, car):        if car.Model_number not in self.cars:            print ("Car already present")        else:            self.cars[car.Model_number] = car.Car_name                def list_cars(self):        for i in self.cars:            print (i)                def list_costomers(self):        for i in self.costomers:            print (i)car_delearship = Car_rental()            car1 = Car("Keonosegg", "ABC123")car2 = Car("Pagani", "CDE456")costomer1 = Costomer("Prakhar", 1000)costomer2 = Costomer("Sinha", 1001)car_delearship.add_cars(car1)car_delearship.add_cars(car2)car_delearship.remove_car(car2)car_delearship.regester_costomer(costomer1)car_delearship.regester_costomer(costomer1)car_delearship.list_cars()car_delearship.list_costomers()==========================================================================================================================================================class Flight:    def __init__(self, flight_number=None, origin=None, destination=None, available_seats=None):        self.flight_number = flight_number        self.origin = origin        self.destination = destination        self.available_seats = available_seats        self.passengers = []      def book_seat(self, passenger):        if self.available_seats == 0:            return False        else:            self.available_seats -= 1            self.passengers.append(passenger)            return True    def cancel_seat(self, passenger):        if passenger in self.passengers:            self.passengers.remove(passenger)            self.available_seats += 1            return True        return False    class Passenger:    def __init__(self, name, passenger_id):        self.name = name        self.passenger_id = passenger_id        self.reservations = []    def add_reservation(self, reservation):        self.reservations.append(reservation)        def remove_reservation(self, reservation):        self.reservations.remove(reservation)class Reservation:    def __init__(self, reservation_id, passenger, flight):        self.reservation_id = reservation_id        self.passenger = passenger        self.flight = flightclass Airlines:    def __init__(self):        self.flights = {}        self.passengers = {}        self.reservations = {}        self.reservation_id_counter = 0    def add_flight(self, flight):        if flight.flight_number not in self.flights:            self.flights[flight.flight_number] = flight    def remove_flight(self, flight_number):        if flight_number in self.flights:            del self.flights[flight_number]    def register_passenger(self, passenger):        if passenger.passenger_id not in self.passengers:            self.passengers[passenger.passenger_id] = passenger    def remove_passenger(self, passenger_id):        if passenger_id in self.passengers:            del self.passengers[passenger_id]    def book_reservation(self, passenger_id, flight_number):        if passenger_id in self.passengers and flight_number in self.flights:            passenger = self.passengers[passenger_id]            flight = self.flights[flight_number]            if flight.book_seat(passenger):                self.reservation_id_counter += 1                reservation = Reservation(self.reservation_id_counter, passenger, flight)                self.reservations[self.reservation_id_counter] = reservation                passenger.add_reservation(reservation)                return reservation        return None    def cancel_reservation(self, reservation_id):        if reservation_id in self.reservations:            reservation = self.reservations[reservation_id]            flight = reservation.flight            passenger = reservation.passenger            if flight.cancel_seat(passenger):                passenger.remove_reservation(reservation)                del self.reservations[reservation_id]                return True        return False    def list_flights(self):        for flight in self.flights.values():            print(f"Flight Number: {flight.flight_number}, Origin: {flight.origin}, Destination: {flight.destination}, Available Seats: {flight.available_seats}")    def list_passengers(self):        for passenger in self.passengers.values():            print(f"Passenger ID: {passenger.passenger_id}, Name: {passenger.name}")# Example Usage:airline = Airlines()flight1 = Flight("A123", "New York", "London", 200)flight2 = Flight("B456", "San Francisco", "Tokyo", 150)airline.add_flight(flight1)airline.add_flight(flight2)passenger1 = Passenger("Alice", 1)passenger2 = Passenger("Bob", 2)airline.register_passenger(passenger1)airline.register_passenger(passenger2)airline.book_reservation(1, "A123")airline.book_reservation(2, "B456")airline.list_flights()airline.list_passengers()airline.cancel_reservation(1)airline.list_flights()airline.list_passengers()=============================================================================                                   